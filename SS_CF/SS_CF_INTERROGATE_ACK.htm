<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
		<title>Tetra SS - SS-CF-INTERROGATE-ACK</title>
		<script src="../SS_Util.js" language="JavaScript" type="text/JavaScript"></script>
		<link href="../SS_PDU_Generator.css" rel="stylesheet" type="text/css">
	</head>
	<body style="" class="PDU_page">
		<form name="Form1" id="Form1" action="">
			<table ID="SS_CF_15_Table">
				<tr>
					<th align="left">Accept/reject</th>
					<td>
						<select id="Accept_reject" onChange="OnChange_Accept_reject(this.form)">
							<option selected value="0" >Accepted
							<option value="1" >Rejected
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Reject cause</th>
					<td>
						<select disabled id="Reject_cause">
							<option selected value="0" >Rejected for any cause (unspecified)
							<option value="1" >User not subscribed to any CFx service
							<option value="2" >User not subscribed to the specified CFx service
							<option value="3" >No SS-CFx available
							<option value="4" >Specified SS-CFx not available
							<option value="5" >Invalid served user number
							<option value="6" >CFx not provided for speech service
							<option value="7" >CFx not provided for data service
							<option value="8" >Invalid forwarded-to user number
							<option value="9" >Temporarily unavailable
							<option value="10" >Not authorized
							<option value="11" >Invalid authorized user number
							<option value="12" >Special service number not allowed
							<option value="13" >CFx not provided for SDS
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Number of forwarded-to users</th>
					<td>
						<input id="Number_of_forwarded_to_users" value="1" size=2>
					</td>
				</tr>
				<tr>
					<th align="left">
						Forwarding Type for voice calls:
					</th>
					<td>
						<select id="Forwarding_type_for_voice_calls">
							<option value="0">None
							<option value="1">CFU
							<option selected value="2">CFB
							<option value="4">CFNRy
							<option value="8">CFNRc
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">
						Forwarding Type for circuit mode data:
					</th>
					<td>
						<select id="Forwarding_type_for_circuit_mode_data">
							<option value="0">None
							<option value="1">CFU
							<option value="2">CFB
							<option selected value="4">CFNRy
							<option value="8">CFNRc
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">
						Forwarding Type for SDS:
					</th>
					<td>
						<select id="Forwarding_type_for_SDS">
							<option value="0">None
							<option selected value="1">CFU
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Address type of the forwarded-to user</th>
					<td>
						<select id="Address_type_of_the_forwarded_to_user" onChange="OnChange_Address_type_of_the_forwarded_to_user(this.form)">
							<option selected value="1" >SSI
							<option value="2" >TSI
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Forwarded-to user SSI</th>
					<td>
						SSI: <input id="Forwarded_to_user_SSI" value="62033" size=15>
					</td>
				</tr>
				<tr>
					<th align="left">Forwarded-to user extension</th>
					<td>
						MCC: <input disabled id="Forwarded_to_user_extension_MCC" value="234" size=5 >
						MNC: <input disabled id="Forwarded_to_user_extension_MNC" value="73" size=5 >
					</td>
				</tr>
				<tr>
					<th align="left">External subscriber digits of forwarded-to user</th>
					<td>
						<select onChange="OnEnableDisable_T2_external_subscriber_digits(this.form)" ID="T2_external_subscriber_digits">
							<option selected value="0">T2 Not Present
							<option value="1">T2 Present
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Number of external subscriber digits</th>
					<td>
						<input disabled onChange="OnChange_Number_of_external_subscriber_digits(this.form)" id="Number_of_external_subscriber_digits" value="13" size=2>
					</td>
				</tr>
				<tr>
					<th align="left">External subscriber digits</th>
					<td>
						<input disabled id="External_subscriber_digits" value="" size=20>
					</td>
				</tr>
				<tr>
					<th align="left">Number of enabled authorized users</th>
					<td>
						<input id="Number_of_enabled_enabled_authorized_users" value="1" size=2>
					</td>
				</tr>
				<tr>
					<th align="left">Address type of the authorized user</th>
					<td>
						<select id="Address_type_of_the_enabled_authorized_user" onChange="OnChange_Address_type_of_the_enabled_authorized_user(this.form)">
							<option value="1" >SSI
							<option value="2" >TSI
						</select>
					</td>
				</tr>
				<tr>
					<th align="left">Authorized user SSI</th>
					<td>
						SSI: <input id="Enabled_authorized_user_SSI" value="62033" size=15>
					</td>
				</tr>
				<tr>
					<th align="left">Authorized user extension</th>
					<td>
						MCC: <input disabled id="Enabled_authorized_user_extension_MCC" value="234" size=5 >
						MNC: <input disabled id="Enabled_authorized_user_extension_MNC" value="73" size=5 >
					</td>
				</tr>
			</table>
		</form>
		<script language="JavaScript" type="text/JavaScript">
			function GetHexValue(pdu_header)
			{
				//Get Mandatory Information Element values
				Accept_reject = document.getElementById('Accept_reject').value;
				Reject_cause = document.getElementById('Reject_cause').value;
				Number_of_forwarded_to_users = document.getElementById('Number_of_forwarded_to_users').value;
				Forwarding_type_for_voice_calls = document.getElementById('Forwarding_type_for_voice_calls').value;
				Forwarding_type_for_circuit_mode_data = document.getElementById('Forwarding_type_for_circuit_mode_data').value;
				Forwarding_type_for_SDS = document.getElementById('Forwarding_type_for_SDS').value;
				Address_type_of_the_forwarded_to_user = document.getElementById('Address_type_of_the_forwarded_to_user').value;
				Forwarded_to_user_SSI = document.getElementById('Forwarded_to_user_SSI').value;
				Forwarded_to_user_extension_MCC = document.getElementById('Forwarded_to_user_extension_MCC').value;
				Forwarded_to_user_extension_MNC = document.getElementById('Forwarded_to_user_extension_MNC').value;
				Number_of_external_subscriber_digits = document.getElementById('Number_of_external_subscriber_digits').value;
				External_subscriber_digits = document.getElementById('External_subscriber_digits').value;
				Number_of_enabled_enabled_authorized_users = document.getElementById('Number_of_enabled_enabled_authorized_users').value;
				Address_type_of_the_enabled_authorized_user = document.getElementById('Address_type_of_the_enabled_authorized_user').value;
				Enabled_authorized_user_SSI = document.getElementById('Enabled_authorized_user_SSI').value;
				Enabled_authorized_user_extension_MCC = document.getElementById('Enabled_authorized_user_extension_MCC').value;
				Enabled_authorized_user_extension_MNC = document.getElementById('Enabled_authorized_user_extension_MNC').value;

				//Initialize using the PDU Header
				pdu_bin_value = pdu_header;
				pdu_bin_value += Accept_reject;
				
				
				if (Accept_reject == "0")
				{
					T2_pdu_bin_value = "";
					forwarded_to_definition = "";
					//Add the Number_of_forwarded_to_users
					pdu_bin_value += dec2bin(Number_of_forwarded_to_users,4);
					
					//If there is at least one forwarded-to user, create the definition
					if (Number_of_forwarded_to_users > 0)
					{
					
						//Beginning of the forwarded-to definition
						
						forwarded_to_definition += dec2bin(Forwarding_type_for_voice_calls,4);
						forwarded_to_definition += dec2bin(Forwarding_type_for_circuit_mode_data,4);
						forwarded_to_definition += dec2bin(Forwarding_type_for_SDS,4);
						
						//Address type + SSI, then the Extension parts only in case TSI was selected as type
						
						forwarded_to_definition += dec2bin(Address_type_of_the_forwarded_to_user,2);
						forwarded_to_definition += dec2bin(Forwarded_to_user_SSI,24);

						if (Address_type_of_the_forwarded_to_user == "2")
						{
							pdu_bin_value += dec2bin(Forwarded_to_user_extension_MCC,10);
							pdu_bin_value += dec2bin(Forwarded_to_user_extension_MNC,14);
						}

						T2_pdu_bin_value += T2_external_subscriber_digits; // Add Presence Bit for T2 External Subscriber
						if (T2_external_subscriber_digits != "0") // If present, add this T2 group of IEs
						{
							T2_pdu_bin_value += dec2bin(Number_of_external_subscriber_digits,5);
							var Number_of_digits = parseInt(Number_of_external_subscriber_digits,10);
							var digits = External_subscriber_digits.substring(0,Number_of_digits);
							T2_pdu_bin_value += digit2bin(digits);
						}
					
						//See if any T2 is present
						T2_str = T2_external_subscriber_digits;
						T2 = parseInt(T2_str,2);
						if (T2 > 0)
						{
							T2_pdu_bin_value = "1" + T2_pdu_bin_value; //T2 is present, Option bit is 1 + T2 IEs
						}
						else
						{
							T2_pdu_bin_value = "0"; //No T2 is present, Option bit is 0
						}
						forwarded_to_definition += T2_pdu_bin_value;
						
						//End of forwarded-to definition
						//Add this definition to the PDU as many times as it is required
						
						for (i=0; i<Number_of_forwarded_to_users; i+=1)
						{
							pdu_bin_value += forwarded_to_definition;
						}
					}
					
					//Beginning of the authorized user definition
					
					pdu_bin_value += dec2bin(Number_of_enabled_enabled_authorized_users,4);
					enabled_authorized_user_definition = "";
					
					if (Number_of_enabled_enabled_authorized_users > "0")
					{
						enabled_authorized_user_definition += dec2bin(Address_type_of_the_enabled_authorized_user,2);
						enabled_authorized_user_definition += dec2bin(Enabled_authorized_user_SSI,24);
						if (Address_type_of_the_enabled_authorized_user == "2")
						{
							enabled_authorized_user_definition += dec2bin(Enabled_authorized_user_extension_MCC,10);
							enabled_authorized_user_definition += dec2bin(Enabled_authorized_user_extension_MCC,14);
						}
						for (i=0; i<Number_of_enabled_enabled_authorized_users; i+=1)
						{
							pdu_bin_value += enabled_authorized_user_definition;
						}

					}
				}
				else if (Accept_reject == "1")
				{
					pdu_bin_value += dec2bin(Reject_cause,4);
				}
				
				//Convert the final binary result to hex and return
				return bin2hex(pdu_bin_value);
			}
			
			function On_Load()
			{
				//We need to execute the digit count
				OnEnableDisable_T2_external_subscriber_digits(this.form);
			}
			function OnChange_Accept_reject(form)
			{
				Accept_reject = document.getElementById('Accept_reject').value;
				if (Accept_reject == "0") 
				{
					document.getElementById('Reject_cause').disabled = true;
					for(i=2;i<form.length;i++)
					{
						form.elements[i].disabled = false ;
					}
					OnChange_Address_type_of_the_forwarded_to_user(form);
					OnEnableDisable_T2_external_subscriber_digits(form);
					OnChange_Address_type_of_the_enabled_authorized_user(form);
				}
				if (Accept_reject == "1")
				{
					document.getElementById('Reject_cause').disabled = false;
					for(i=2;i<form.length;i++)
					{
						form.elements[i].disabled = true ;
					}
				}
			}
			function OnChange_Address_type_of_the_forwarded_to_user(form)
			{
				Address_type_of_the_forwarded_to_user = document.getElementById('Address_type_of_the_forwarded_to_user').value;
				if (Address_type_of_the_forwarded_to_user == "1") 
				{
					document.getElementById('Forwarded_to_user_extension_MCC').disabled = true;
					document.getElementById('Forwarded_to_user_extension_MNC').disabled = true;
				}
				if (Address_type_of_the_forwarded_to_user == "2")
				{
					document.getElementById('Forwarded_to_user_extension_MCC').disabled = false;
					document.getElementById('Forwarded_to_user_extension_MNC').disabled = false;
				}
			}
					
			function OnEnableDisable_T2_external_subscriber_digits(form)
			{
				T2_external_subscriber_digits = document.getElementById('T2_external_subscriber_digits').value;
				document.getElementById('Number_of_external_subscriber_digits').disabled = true;
				document.getElementById('External_subscriber_digits').disabled = true;
				
				if (T2_external_subscriber_digits == "1")
				{
					document.getElementById('Number_of_external_subscriber_digits').disabled = false;
					document.getElementById('External_subscriber_digits').disabled = false;
				}
				OnChange_Number_of_external_subscriber_digits(form);
			}
			
			function OnChange_Number_of_external_subscriber_digits(form)
			{
				Number_of_external_subscriber_digits = document.getElementById('Number_of_external_subscriber_digits').value;
				var var_external_subscriber_digits = "+#*12345678901234567890123456789";
				
				Number_of_digits = parseInt(Number_of_external_subscriber_digits,10);
				if (Number_of_digits >= 32)
				{
					alert("Number of Digits between 0...31");
					return;
				}
				External_subscriber_digits = var_external_subscriber_digits.substring(0,Number_of_digits);
				document.getElementById('External_subscriber_digits').value = External_subscriber_digits;
			}
			function OnChange_Address_type_of_the_enabled_authorized_user(form)
			{
				Activating_user_type = document.getElementById('Activating_user_type').value;
				Address_type_of_the_enabled_authorized_user = document.getElementById('Address_type_of_the_enabled_authorized_user').value;
				document.getElementById('Enabled_authorized_user_SSI').disabled = true;
				document.getElementById('Enabled_authorized_user_extension_MCC').disabled = true;
				document.getElementById('Enabled_authorized_user_extension_MNC').disabled = true;
				
				if (Activating_user_type == "0") 
					return;
				if (Address_type_of_the_enabled_authorized_user== "1") 
				{
					document.getElementById('Enabled_authorized_user_SSI').disabled = false;
				}
				else
				if (Address_type_of_the_enabled_authorized_user== "2") 
				{
					document.getElementById('Enabled_authorized_user_SSI').disabled = false;
					document.getElementById('Enabled_authorized_user_extension_MCC').disabled = false;
					document.getElementById('Enabled_authorized_user_extension_MNC').disabled = false;
				}
			}
			function OnChange_Address_type_of_the_enabled_authorized_user(form)
			{
				Accept_reject = document.getElementById('Accept_reject').value;
				Address_type_of_the_enabled_authorized_user = document.getElementById('Address_type_of_the_enabled_authorized_user').value;

				document.getElementById('Enabled_authorized_user_SSI').disabled = true;
				document.getElementById('Enabled_authorized_user_extension_MCC').disabled = true;
				document.getElementById('Enabled_authorized_user_extension_MNC').disabled = true;
				
				if (Accept_reject == "1") 
					return;
					
				if (Address_type_of_the_enabled_authorized_user == "1")
				{
					document.getElementById('Enabled_authorized_user_SSI').disabled = false;
				}
				else
				if (Address_type_of_the_enabled_authorized_user == "2")
				{
					document.getElementById('Enabled_authorized_user_SSI').disabled = false;
					document.getElementById('Enabled_authorized_user_extension_MCC').disabled = false;
					document.getElementById('Enabled_authorized_user_extension_MNC').disabled = false;
				}
			}
		</script>
	</body>
</html>
